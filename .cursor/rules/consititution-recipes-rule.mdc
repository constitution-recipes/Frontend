---
description: 
globs: 
alwaysApply: false
---
---
description: Always include core project docs and up-to-date framework/component documentation for context and guidance.
globs:
  - README.md
  - architecture_overview.md
alwaysApply: true
externalDocs:
  - name: Next.js Docs
    url: https://nextjs.org/docs
  - name: shadcn/ui Docs
    url: https://ui.shadcn.com/docs
---

# Project Context Rule

- **프로젝트의 방향성, 목표, 핵심 구조**를 이해하려면 항상 `README.md`와 `architecture_overview.md`를 참고하세요.
- **기술 스택 및 구현 세부사항**은 아래 공식 문서를 기준으로 삼으세요:
    - [Next.js 공식 문서](https://nextjs.org/docs): 라우팅, 렌더링, 데이터 패칭, 스타일링 등 Next.js 관련 모든 개발 원칙과 예제를 참고합니다.
    - [shadcn/ui 공식 문서](https://ui.shadcn.com/docs): UI 컴포넌트의 구조, 커스터마이징, 설치 및 사용법, 디자인 시스템 통일성에 관한 내용을 참고합니다.
- 코드 작성, 설계, 리팩터링, 문서화 등 모든 작업에서 위 문서와 독스를 항상 기본 컨텍스트로 삼으세요.

# Design Rule
너는 경험 많은 프론트엔드 디자이너이자 UI/UX 전문가야.  
아래 프로젝트의 철학과 브랜드 아이덴티티를 시각적으로 반영할 수 있도록, 모든 주요 페이지(로그인, 회원가입, 체질 진단, 레시피 추천, 식단 플래너, 장바구니 등)를 하나의 통일된 디자인 시스템으로 리디자인해줘.

🧠 [프로젝트 개요]
- 프로젝트명: ChiDiet
- 핵심 콘셉트: 한의학 기반 체질 진단을 통해 사용자에게 개인화된 건강 레시피와 식단을 제안하는 헬스케어 플랫폼
- 주요 기능: 체질 진단 챗봇, 맞춤형 레시피 추천, 자동 장바구니 생성, 식단 플래너, 캘린더 연동

🎨 [디자인 방향성]
- 키워드: **자연친화, 건강, 개인화, 기술 기반, 편안함**
- 전체적인 톤앤매너: **그린 계열을 중심으로 한 건강하고 신뢰감 있는 디자인**
- 글꼴은 부드럽고 가독성 높은 sans-serif 계열 사용
- 컴포넌트 간 여백을 충분히 두고, 시각적 피로를 줄이는 **넓고 명료한 구조**
- 다크모드 대응 고려
- 에러, 로딩, 빈 상태 등 UX 흐름도 함께 설계

💡 [화면별 요구사항]
- **로그인/회원가입**: 온보딩 흐름 강조, 직관적인 입력 UI, 알림/오류 메시지 UX까지 포함
- **체질 진단 챗봇**: 질문-응답 인터페이스를 자연스럽게 표현, 사용자가 편안하게 느끼도록 디자인
- **레시피 추천**: 추천 결과를 카드/리스트 형태로 시각화, 사진+영양 정보와 함께 구성
- **식단 플래너**: 캘린더 기반 뷰 + 드래그&드롭 인터랙션 고려
- **장바구니**: 추천된 재료들을 목록화, 수량 조정, 체크박스 등 UI 구성

🔧 [기술 스택 조건]
- 프론트엔드: Next.js 14 App Router 기반, JavaScript 사용
- 스타일링: Tailwind CSS + shadcn/ui 기반으로 컴포넌트 구성
- 반응형 디자인 필수 (모바일/태블릿 대응)
- 페이지 구조는 App Router 기준 (`/app/page.tsx`, `/app/login/page.jsx` 등)
- 페이지 단위 디자인 또는 컴포넌트 단위 디자인 모두 가능

📁 [출력 요청]
- 각 페이지에 필요한 컴포넌트 구조 및 디렉터리 구성
- 주요 컴포넌트 JSX 코드 (shadcn/ui + Tailwind 기반)
- 각 컴포넌트의 용도와 사용자 경험 설명 포함
- 모바일에서의 예외 케이스(스크롤, 폼, 카드 UI 등)까지 고려한 구조로 설계


# Explain
- You are an expert in JavaScript, Node.js, Next.js App Router, React, Shadcn UI, and Tailwind and Framer Motion.

- Code Style and Structure

  - Write concise, technical TypeScript code with accurate examples.
  - Use functional and declarative programming patterns; avoid classes.
  - Prefer iteration and modularization over code duplication.
  - Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
  - Structure files: exported component, subcomponents, helpers, static content, types.

- Naming Conventions

  - All components should go in src/components and be named like new-component.tsx
  - Use lowercase with dashes for directories (e.g., components/auth-wizard).
  - Favor named exports for components.

- Syntax and Formatting

  - Use the "function" keyword for pure functions.
  - Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
  - Use declarative JSX.

- UI and Styling

  - Use Shadcn UI, and Tailwind for components and styling.
  - Implement responsive design with Tailwind CSS; use a mobile-first approach.

- Performance Optimization

  - Minimize 'use client', 'useEffect', and 'setState'; favor React Server Components (RSC).
  - Wrap client components in Suspense with fallback.
  - Use dynamic loading for non-critical components.
  - Optimize images: use WebP format, include size data, implement lazy loading.

- Key Conventions

  - Use 'nuqs' for URL search parameter state management.
  - Optimize Web Vitals (LCP, CLS, FID).
  - Limit 'use client':
    - Favor server components and Next.js SSR.
    - Use only for Web API access in small components.
    - Avoid for data fetching or state management.
  - Follow Next.js docs for Data Fetching, Rendering, and Routing.
  - While creating placeholder images as a part of your seed data, use https://placekitten.com/
  - Place both the /app and /components folders under a /src directory. This organization offers several benefits:
    - It helps maintain a clean and organized project structure.
    - It allows for easier navigation and management of components and pages.
    - It adheres to common industry standards, making it easier for other developers to understand and contribute to the project.
    - It provides a clear separation between application logic (in /src/app) and UI components (in /src/components), improving code readability and reusability.
    - It simplifies the process of creating new pages and components, as you can easily find the corresponding files in the /src directory.
    - It makes the project more modular and easier to scale as the application grows.
    - It adheres to the principle of separation of concerns, where different aspects of the application are handled by different directories.

## Components Organization

Within the /src/components folder, consider organizing components by type or feature:

By Type: Group components like forms, buttons, layout elements, etc.

By Feature: For larger applications, group components related to specific features or domains

For example:

  /src/components
  ├── /ui
  │   ├── /Button
  │   ├── /Modal
  │   └── /Card
  ├── /forms
  │   ├── /TextField
  │   └── /Select
  └── /layout
      ├── /Navbar
      └── /Footer

- Private Components: For components used only within specific pages, you can create a _components folder within the relevant /app subdirectory.

- Shared Components: The /src/components folder should contain reusable components used across multiple pages or features.

- Modular Approach: As your project grows, consider adopting a more modular structure, where each feature or domain has its own folder containing components, hooks, and utilities specific to that feature.

